import React, { useState, useEffect } from "react";
import axios from "axios";

const BACKEND_URL = process.env.REACT_APP_BACKEND_URL;
const API = `${BACKEND_URL}/api`;

const Dashboard = () => {
  const [botStatus, setBotStatus] = useState(null);
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(false);

  const fetchBotStatus = async () => {
    try {
      const response = await axios.get(`${API}/bot/status`);
      setBotStatus(response.data);
    } catch (error) {
      console.error("Failed to fetch bot status:", error);
    }
  };

  const fetchStats = async () => {
    try {
      const response = await axios.get(`${API}/logs/stats`);
      setStats(response.data);
    } catch (error) {
      console.error("Failed to fetch stats:", error);
    }
  };

  useEffect(() => {
    fetchBotStatus();
    fetchStats();
    const interval = setInterval(() => {
      fetchBotStatus();
      fetchStats();
    }, 5000);
    return () => clearInterval(interval);
  }, []);

  const startBot = async () => {
    setLoading(true);
    try {
      await axios.post(`${API}/bot/start`);
      await fetchBotStatus();
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: " + error.response?.data?.detail || error.message);
    }
    setLoading(false);
  };

  const stopBot = async () => {
    setLoading(true);
    try {
      await axios.post(`${API}/bot/stop`);
      await fetchBotStatus();
    } catch (error) {
      alert("–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: " + error.response?.data?.detail || error.message);
    }
    setLoading(false);
  };

  const getStatusColor = (status) => {
    switch (status) {
      case "running": return "text-green-600 bg-green-100";
      case "stopped": return "text-gray-600 bg-gray-100";
      case "starting": return "text-yellow-600 bg-yellow-100";
      case "error": return "text-red-600 bg-red-100";
      default: return "text-gray-600 bg-gray-100";
    }
  };

  const getStatusText = (status) => {
    switch (status) {
      case "running": return "–ó–∞–ø—É—â–µ–Ω";
      case "stopped": return "–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω";
      case "starting": return "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è";
      case "error": return "–û—à–∏–±–∫–∞";
      default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-lg shadow p-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">Dashboard</h1>
        
        {/* Bot Status */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div className="bg-gradient-to-r from-blue-500 to-blue-600 rounded-lg p-6 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-blue-100">–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞</p>
                <p className="text-2xl font-bold">
                  {botStatus ? getStatusText(botStatus.status) : "–ó–∞–≥—Ä—É–∑–∫–∞..."}
                </p>
              </div>
              <div className="text-4xl">ü§ñ</div>
            </div>
          </div>

          <div className="bg-gradient-to-r from-green-500 to-green-600 rounded-lg p-6 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-green-100">–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤</p>
                <p className="text-2xl font-bold">
                  {botStatus ? botStatus.active_accounts : 0}
                </p>
              </div>
              <div className="text-4xl">üë•</div>
            </div>
          </div>

          <div className="bg-gradient-to-r from-purple-500 to-purple-600 rounded-lg p-6 text-white">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-purple-100">–û—Ç–≤–µ—Ç–æ–≤ —Å–µ–≥–æ–¥–Ω—è</p>
                <p className="text-2xl font-bold">
                  {stats ? stats.responses_today : 0}
                </p>
              </div>
              <div className="text-4xl">üí¨</div>
            </div>
          </div>
        </div>

        {/* Control Buttons */}
        <div className="flex space-x-4 mb-8">
          <button
            onClick={startBot}
            disabled={loading || (botStatus && botStatus.status === "running")}
            className="bg-green-600 hover:bg-green-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
          >
            <span>‚ñ∂Ô∏è</span>
            <span>{loading ? "–ó–∞–ø—É—Å–∫..." : "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç"}</span>
          </button>
          
          <button
            onClick={stopBot}
            disabled={loading || (botStatus && botStatus.status === "stopped")}
            className="bg-red-600 hover:bg-red-700 disabled:bg-gray-400 text-white px-6 py-3 rounded-lg font-medium transition-colors flex items-center space-x-2"
          >
            <span>‚èπÔ∏è</span>
            <span>{loading ? "–û—Å—Ç–∞–Ω–æ–≤–∫–∞..." : "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç"}</span>
          </button>
        </div>

        {/* Statistics */}
        {stats && (
          <div className="bg-gray-50 rounded-lg p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-blue-600">{stats.total_responses}</p>
                <p className="text-sm text-gray-600">–í—Å–µ–≥–æ –æ—Ç–≤–µ—Ç–æ–≤</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-green-600">{stats.successful_responses}</p>
                <p className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω—ã—Ö</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-red-600">{stats.failed_responses}</p>
                <p className="text-sm text-gray-600">–û—à–∏–±–æ–∫</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-purple-600">{stats.success_rate.toFixed(1)}%</p>
                <p className="text-sm text-gray-600">–£—Å–ø–µ—à–Ω–æ—Å—Ç—å</p>
              </div>
            </div>
          </div>
        )}

        {/* Daily Limit */}
        {botStatus && (
          <div className="mt-6 bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-yellow-800">–î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç</p>
                <p className="text-sm text-yellow-600">
                  {botStatus.daily_response_count} –∏–∑ {botStatus.max_daily_responses} –æ—Ç–≤–µ—Ç–æ–≤
                </p>
              </div>
              <div className="text-2xl">{botStatus.daily_response_count >= botStatus.max_daily_responses ? "üö´" : "‚úÖ"}</div>
            </div>
            <div className="mt-2 w-full bg-yellow-200 rounded-full h-2">
              <div 
                className="bg-yellow-600 h-2 rounded-full" 
                style={{
                  width: `${Math.min((botStatus.daily_response_count / botStatus.max_daily_responses) * 100, 100)}%`
                }}
              ></div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Dashboard;